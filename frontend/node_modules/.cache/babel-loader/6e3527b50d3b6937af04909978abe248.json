{"ast":null,"code":"// const TOKEN_KEY = 'tokens'\n\n/**\n * Manage the how Access Tokens are being stored and retrieved from storage.\n *\n * Current implementation stores to localStorage. Local Storage should always be\n * accessed through this instance.\n**/\nconst TokenService = {\n  saveToken(Token) {\n    localStorage.setItem('token', Token);\n  },\n\n  saveAccessToken(accessToken) {\n    localStorage.setItem('accessToken', accessToken);\n  },\n\n  saveRefreshToken(refreshToken) {\n    localStorage.setItem('refreshToken', refreshToken);\n  },\n\n  saveCurrentUser(user) {\n    localStorage.setItem('user', JSON.stringify(user));\n  },\n\n  getRefreshToken() {\n    return localStorage.getItem('refreshToken');\n  },\n\n  getToken() {\n    return localStorage.getItem('token');\n  },\n\n  getAccessToken() {\n    return localStorage.getItem('accessToken');\n  },\n\n  getCurrentUser() {\n    return localStorage.getItem('user');\n  },\n\n  // remove tokens from storage\n  removeToken() {\n    localStorage.removeItem('token');\n  },\n\n  removeAccessToken() {\n    localStorage.removeItem('acessToken');\n  },\n\n  removeRefreshToken() {\n    localStorage.removeItem('refreshToken');\n  }\n\n};\nexport default TokenService;\nexport { TokenService };","map":{"version":3,"names":["TokenService","saveToken","Token","localStorage","setItem","saveAccessToken","accessToken","saveRefreshToken","refreshToken","saveCurrentUser","user","JSON","stringify","getRefreshToken","getItem","getToken","getAccessToken","getCurrentUser","removeToken","removeItem","removeAccessToken","removeRefreshToken"],"sources":["/home/akams_r/Desktop/scrap/bridgelabs-submission/frontend/src/services/storage.js"],"sourcesContent":["// const TOKEN_KEY = 'tokens'\n\n/**\n * Manage the how Access Tokens are being stored and retrieved from storage.\n *\n * Current implementation stores to localStorage. Local Storage should always be\n * accessed through this instance.\n**/\nconst TokenService = {\n\n  saveToken (Token) {\n    localStorage.setItem('token', Token)\n  },\n\n  saveAccessToken (accessToken) {\n    localStorage.setItem('accessToken', accessToken)\n  },\n\n  saveRefreshToken (refreshToken) {\n    localStorage.setItem('refreshToken', refreshToken)\n  },\n\n  saveCurrentUser(user) {\n    localStorage.setItem('user', JSON.stringify(user))\n  },\n\n  getRefreshToken () {\n    return localStorage.getItem('refreshToken')\n  },\n\n  getToken () {\n    return localStorage.getItem('token')\n  },\n  \n  getAccessToken () {\n    return localStorage.getItem('accessToken')\n  },\n\n  getCurrentUser () {\n    return localStorage.getItem('user')\n  },\n\n  // remove tokens from storage\n\n  removeToken () {\n    localStorage.removeItem('token')\n  },\n  removeAccessToken () {\n    localStorage.removeItem('acessToken')\n  },\n  removeRefreshToken () {\n    localStorage.removeItem('refreshToken')\n  }\n\n}\n\nexport default TokenService\nexport {TokenService}"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,YAAY,GAAG;EAEnBC,SAAS,CAAEC,KAAF,EAAS;IAChBC,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BF,KAA9B;EACD,CAJkB;;EAMnBG,eAAe,CAAEC,WAAF,EAAe;IAC5BH,YAAY,CAACC,OAAb,CAAqB,aAArB,EAAoCE,WAApC;EACD,CARkB;;EAUnBC,gBAAgB,CAAEC,YAAF,EAAgB;IAC9BL,YAAY,CAACC,OAAb,CAAqB,cAArB,EAAqCI,YAArC;EACD,CAZkB;;EAcnBC,eAAe,CAACC,IAAD,EAAO;IACpBP,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BO,IAAI,CAACC,SAAL,CAAeF,IAAf,CAA7B;EACD,CAhBkB;;EAkBnBG,eAAe,GAAI;IACjB,OAAOV,YAAY,CAACW,OAAb,CAAqB,cAArB,CAAP;EACD,CApBkB;;EAsBnBC,QAAQ,GAAI;IACV,OAAOZ,YAAY,CAACW,OAAb,CAAqB,OAArB,CAAP;EACD,CAxBkB;;EA0BnBE,cAAc,GAAI;IAChB,OAAOb,YAAY,CAACW,OAAb,CAAqB,aAArB,CAAP;EACD,CA5BkB;;EA8BnBG,cAAc,GAAI;IAChB,OAAOd,YAAY,CAACW,OAAb,CAAqB,MAArB,CAAP;EACD,CAhCkB;;EAkCnB;EAEAI,WAAW,GAAI;IACbf,YAAY,CAACgB,UAAb,CAAwB,OAAxB;EACD,CAtCkB;;EAuCnBC,iBAAiB,GAAI;IACnBjB,YAAY,CAACgB,UAAb,CAAwB,YAAxB;EACD,CAzCkB;;EA0CnBE,kBAAkB,GAAI;IACpBlB,YAAY,CAACgB,UAAb,CAAwB,cAAxB;EACD;;AA5CkB,CAArB;AAgDA,eAAenB,YAAf;AACA,SAAQA,YAAR"},"metadata":{},"sourceType":"module"}