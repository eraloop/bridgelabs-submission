{"ast":null,"code":"import router from '@/router';\nimport Vue from 'vue';\nimport Vuex from 'vuex';\nimport { UserService } from '../services/user';\nimport { CrudService } from '../services/categories';\nimport { TokenService } from '../services/storage';\nimport { AxiosError } from 'axios';\nVue.use(Vuex);\nexport default new Vuex.Store({\n  state: {\n    token: TokenService.getToken(),\n    accessToken: TokenService.getAccessToken(),\n    refreshToken: TokenService.getRefreshToken(),\n    user: TokenService.getCurrentUser(),\n    categories: [],\n    registrationLoginFailure: false,\n    loggedIn: '',\n    categoryCreated: false,\n    loginError: {\n      message: \"\",\n      status: \"\"\n    }\n  },\n  getters: {\n    returnUser(state) {\n      return state.user;\n    },\n\n    returnLoggedIn(state) {\n      if (!(state.token === '')) {\n        return state.loggedIn = true;\n      } else {\n        return state.loggedIn = false;\n      }\n    },\n\n    returnCategoryValues(state) {\n      return state.categories;\n    },\n\n    returnCategoryCreated(state) {\n      return state.categoryCreated;\n    },\n\n    returnItemForUpdate: state => id => {\n      return state.categories.find(cat => cat.id === id);\n    },\n\n    returnLoginError(state) {\n      return state.loginError;\n    }\n\n  },\n  mutations: {\n    registrationSuccess(state, payload) {\n      state.token = payload.response.access, state.refreshToken = payload.response.refresh;\n      state.user.email = payload.response.data.email, state.user.name = payload.response.data.last_name, state.user.avatar = payload.user.pic, state.loggedIn = true;\n    },\n\n    loginSuccess(state, payload) {\n      state.token = payload.response.access, state.refreshToken = payload.response.refresh; // state.user.email = payload.response.email,\n      // state.user.name = payload.response.last_name,\n      // state.user.avatar = payload.user.pic,\n\n      state.loggedIn = true;\n    },\n\n    registrationFailure(state) {\n      state.registrationLoginFailure = true;\n    },\n\n    categoryFetchSuccess(state, payload) {\n      state.categories = payload;\n    },\n\n    createCategorySuccess(state) {\n      state.categoryCreated = true;\n    },\n\n    deleteSuccess(state, item) {\n      state.categories.filter(cat => {\n        return cat.id !== item;\n      });\n    },\n\n    loginError(state, payload) {\n      state.loginError.message = payload.response.data.detail, state.loginError.status = payload.response.status;\n    },\n\n    loggoutSuccess(state) {\n      state.loggedIn = false;\n      state.user = {};\n      state.token = '';\n      state.accessToken = '';\n      state.refreshToken = '';\n    }\n\n  },\n  actions: {\n    async loginUser({\n      commit\n    }, user) {\n      try {\n        const response = await UserService.login(user);\n\n        if (response instanceof AxiosError) {\n          commit(\"loginError\", response);\n          return false;\n        }\n\n        if (!(response.token === '')) {\n          commit('loginSuccess', {\n            response,\n            user\n          }); // Redirect the user to the page he first tried to visit or to the home view token\n\n          router.push('/home');\n        }\n      } catch (e) {\n        return e;\n      }\n    },\n\n    async registerUser({\n      commit\n    }, user) {\n      try {\n        const response = await UserService.register(user);\n\n        if (!(response.status === 200) || !(response.data.token === '')) {\n          commit(\"registrationFailure\", response);\n          router.push(\"/login\");\n          return;\n        }\n\n        if (response instanceof AxiosError) {\n          commit(\"registrationError\", response);\n          return false;\n        }\n      } catch (e) {\n        return false;\n      }\n    },\n\n    async logoutUser({\n      commit\n    }) {\n      // logout function, makes a request the\n      try {\n        if (!(TokenService.getRefreshToken === '')) {\n          const response = await UserService.logout();\n\n          if (response.status === 200) {\n            commit('loggoutSuccess');\n            TokenService.removeToken();\n            TokenService.removeAccessToken();\n            TokenService.removeRefreshToken();\n            router.push('/login');\n          }\n        }\n\n        commit(\"loggoutSuccess\");\n        router.push('/login'); // return true\n      } catch (e) {\n        return false;\n      }\n    },\n\n    // section contains functions for crud operations , \n    async create({\n      commit\n    }, payload) {\n      try {\n        const response = await CrudService.create(payload);\n\n        if (response.status === 200) {\n          commit('createCategorySuccess');\n          return true;\n        }\n      } catch (e) {\n        return false;\n      }\n    },\n\n    async read({\n      commit\n    }) {\n      try {\n        const response = await CrudService.read();\n\n        if (response.status === 200) {\n          commit('categoryFetchSuccess', response);\n          return true;\n        }\n      } catch (e) {\n        return false;\n      }\n    },\n\n    async update({\n      commit\n    }, item) {\n      try {\n        const response = await CrudService.update(item);\n        commit('updateSuccess', response);\n        return true;\n      } catch (e) {\n        return false;\n      }\n    },\n\n    async delete({\n      commit\n    }, item) {\n      try {\n        const response = await CrudService.delete(item);\n        commit('deleteSuccess', response);\n        return response;\n      } catch (e) {\n        return e;\n      }\n    }\n\n  }\n});","map":{"version":3,"names":["router","Vue","Vuex","UserService","CrudService","TokenService","AxiosError","use","Store","state","token","getToken","accessToken","getAccessToken","refreshToken","getRefreshToken","user","getCurrentUser","categories","registrationLoginFailure","loggedIn","categoryCreated","loginError","message","status","getters","returnUser","returnLoggedIn","returnCategoryValues","returnCategoryCreated","returnItemForUpdate","id","find","cat","returnLoginError","mutations","registrationSuccess","payload","response","access","refresh","email","data","name","last_name","avatar","pic","loginSuccess","registrationFailure","categoryFetchSuccess","createCategorySuccess","deleteSuccess","item","filter","detail","loggoutSuccess","actions","loginUser","commit","login","push","e","registerUser","register","logoutUser","logout","removeToken","removeAccessToken","removeRefreshToken","create","read","update","delete"],"sources":["/home/akams_r/Desktop/scrap/bridgelabs-submission/frontend/src/store/index.js"],"sourcesContent":["import router from '@/router'\nimport Vue from 'vue'\nimport Vuex from 'vuex'\n\nimport {UserService} from '../services/user'\nimport {CrudService} from '../services/categories'\n\nimport { TokenService } from '../services/storage'\nimport { AxiosError } from 'axios'\n\nVue.use(Vuex)\n\nexport default new Vuex.Store({\n  state: {\n\n    token: TokenService.getToken(),\n    accessToken: TokenService.getAccessToken(),\n    refreshToken: TokenService.getRefreshToken(),\n\n    user: TokenService.getCurrentUser(),\n    categories:[],\n    registrationLoginFailure: false,\n    loggedIn: '',\n    categoryCreated: false,\n    loginError: {\n      message: \"\",\n      status: \"\"\n    }\n\n  },\n\n  getters: {\n\n    returnUser(state){\n      return state.user\n    },\n\n    returnLoggedIn(state){\n\n      if(!(state.token === '')){\n        return state.loggedIn = true\n      }else{\n        return state.loggedIn = false\n      }\n    },\n\n    returnCategoryValues(state){\n      return state.categories\n    },\n    returnCategoryCreated(state){\n      return state.categoryCreated\n    },\n\n    returnItemForUpdate: (state) => (id) => {\n      return state.categories.find(cat => cat.id === id)\n    },\n     \n    returnLoginError(state){\n      return state.loginError\n    }\n\n  },\n\n  mutations: {\n    registrationSuccess(state, payload){\n      state.token = payload.response.access,\n      state.refreshToken = payload.response.refresh\n\n      state.user.email = payload.response.data.email,\n      state.user.name = payload.response.data.last_name,\n      state.user.avatar = payload.user.pic,\n      state.loggedIn = true\n    },\n\n    loginSuccess(state, payload){\n      state.token = payload.response.access,\n      state.refreshToken = payload.response.refresh\n\n      // state.user.email = payload.response.email,\n      // state.user.name = payload.response.last_name,\n      // state.user.avatar = payload.user.pic,\n      state.loggedIn = true\n    },\n\n    registrationFailure(state){\n      state.registrationLoginFailure = true\n    },\n\n    categoryFetchSuccess(state, payload){\n      state.categories = payload\n    },\n\n    createCategorySuccess(state){\n      state.categoryCreated = true\n    },\n\n    deleteSuccess(state, item){\n      state.categories.filter(cat => {\n        return cat.id !== item\n      })\n    },\n\n    loginError(state, payload){\n      state.loginError.message = payload.response.data.detail,\n      state.loginError.status = payload.response.status\n    },\n\n    loggoutSuccess(state){\n      state.loggedIn = false\n      state.user = {}\n      state.token = ''\n      state.accessToken = ''\n      state.refreshToken = ''\n    }\n\n  },\n  actions: {\n\n      async loginUser({commit}, user) {\n        try {\n\n          const response = await UserService.login(user)\n\n          if(response instanceof AxiosError){\n            commit(\"loginError\", response)\n            return false\n          }\n          \n          if(!(response.token === '')){\n            commit('loginSuccess', { response, user})\n            // Redirect the user to the page he first tried to visit or to the home view token\n            router.push('/home')\n          }\n          \n        } catch (e) {\n          return e\n        }\n      },\n  \n      async registerUser({ commit }, user) {\n\n        try {\n\n          const response = await UserService.register(user)\n\n          if(!(response.status === 200) || !(response.data.token === '')){\n            commit(\"registrationFailure\", response)\n            router.push(\"/login\")\n            return\n          }\n\n          if(response instanceof AxiosError){\n            commit(\"registrationError\", response)\n            return false\n          }\n        \n        } catch (e) {\n          return false\n        }\n      },\n\n      async logoutUser({commit}) {\n        // logout function, makes a request the\n        try {\n\n          if(!(TokenService.getRefreshToken === '')){\n            const response = await UserService.logout()\n            if(response.status === 200){\n              commit('loggoutSuccess')\n              TokenService.removeToken()\n              TokenService.removeAccessToken()\n              TokenService.removeRefreshToken()\n              router.push('/login')\n            }\n          }\n\n          commit(\"loggoutSuccess\")\n          router.push('/login')\n          // return true\n        } catch (e) {\n          return false\n        }\n      },\n\n      // section contains functions for crud operations , \n\n      async create({ commit }, payload) {\n\n        try {\n          const response = await CrudService.create(payload)\n          if((response.status === 200)){\n            commit('createCategorySuccess')\n            return true\n          }\n        \n        } catch (e) {\n          return false\n        }\n      },\n\n      async read({ commit }) {\n\n        try {\n          const response = await CrudService.read()\n          if(response.status === 200){\n            commit('categoryFetchSuccess', response)\n            return true\n          }\n        \n        } catch (e) {\n          return false\n        }\n      },\n\n      async update({ commit }, item) {\n\n        try {\n          const response = await CrudService.update(item)\n\n          commit('updateSuccess', response)\n          return true\n        \n        } catch (e) {\n          return false\n        }\n      },\n\n      async delete({ commit }, item) {\n        try {\n          const response = await CrudService.delete(item)\n          commit('deleteSuccess', response)   \n          return response\n        } catch (e) {\n          return e\n        }\n      },\n  }\n\n\n})\n"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,UAAnB;AACA,OAAOC,GAAP,MAAgB,KAAhB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AAEA,SAAQC,WAAR,QAA0B,kBAA1B;AACA,SAAQC,WAAR,QAA0B,wBAA1B;AAEA,SAASC,YAAT,QAA6B,qBAA7B;AACA,SAASC,UAAT,QAA2B,OAA3B;AAEAL,GAAG,CAACM,GAAJ,CAAQL,IAAR;AAEA,eAAe,IAAIA,IAAI,CAACM,KAAT,CAAe;EAC5BC,KAAK,EAAE;IAELC,KAAK,EAAEL,YAAY,CAACM,QAAb,EAFF;IAGLC,WAAW,EAAEP,YAAY,CAACQ,cAAb,EAHR;IAILC,YAAY,EAAET,YAAY,CAACU,eAAb,EAJT;IAMLC,IAAI,EAAEX,YAAY,CAACY,cAAb,EAND;IAOLC,UAAU,EAAC,EAPN;IAQLC,wBAAwB,EAAE,KARrB;IASLC,QAAQ,EAAE,EATL;IAULC,eAAe,EAAE,KAVZ;IAWLC,UAAU,EAAE;MACVC,OAAO,EAAE,EADC;MAEVC,MAAM,EAAE;IAFE;EAXP,CADqB;EAmB5BC,OAAO,EAAE;IAEPC,UAAU,CAACjB,KAAD,EAAO;MACf,OAAOA,KAAK,CAACO,IAAb;IACD,CAJM;;IAMPW,cAAc,CAAClB,KAAD,EAAO;MAEnB,IAAG,EAAEA,KAAK,CAACC,KAAN,KAAgB,EAAlB,CAAH,EAAyB;QACvB,OAAOD,KAAK,CAACW,QAAN,GAAiB,IAAxB;MACD,CAFD,MAEK;QACH,OAAOX,KAAK,CAACW,QAAN,GAAiB,KAAxB;MACD;IACF,CAbM;;IAePQ,oBAAoB,CAACnB,KAAD,EAAO;MACzB,OAAOA,KAAK,CAACS,UAAb;IACD,CAjBM;;IAkBPW,qBAAqB,CAACpB,KAAD,EAAO;MAC1B,OAAOA,KAAK,CAACY,eAAb;IACD,CApBM;;IAsBPS,mBAAmB,EAAGrB,KAAD,IAAYsB,EAAD,IAAQ;MACtC,OAAOtB,KAAK,CAACS,UAAN,CAAiBc,IAAjB,CAAsBC,GAAG,IAAIA,GAAG,CAACF,EAAJ,KAAWA,EAAxC,CAAP;IACD,CAxBM;;IA0BPG,gBAAgB,CAACzB,KAAD,EAAO;MACrB,OAAOA,KAAK,CAACa,UAAb;IACD;;EA5BM,CAnBmB;EAmD5Ba,SAAS,EAAE;IACTC,mBAAmB,CAAC3B,KAAD,EAAQ4B,OAAR,EAAgB;MACjC5B,KAAK,CAACC,KAAN,GAAc2B,OAAO,CAACC,QAAR,CAAiBC,MAA/B,EACA9B,KAAK,CAACK,YAAN,GAAqBuB,OAAO,CAACC,QAAR,CAAiBE,OADtC;MAGA/B,KAAK,CAACO,IAAN,CAAWyB,KAAX,GAAmBJ,OAAO,CAACC,QAAR,CAAiBI,IAAjB,CAAsBD,KAAzC,EACAhC,KAAK,CAACO,IAAN,CAAW2B,IAAX,GAAkBN,OAAO,CAACC,QAAR,CAAiBI,IAAjB,CAAsBE,SADxC,EAEAnC,KAAK,CAACO,IAAN,CAAW6B,MAAX,GAAoBR,OAAO,CAACrB,IAAR,CAAa8B,GAFjC,EAGArC,KAAK,CAACW,QAAN,GAAiB,IAHjB;IAID,CATQ;;IAWT2B,YAAY,CAACtC,KAAD,EAAQ4B,OAAR,EAAgB;MAC1B5B,KAAK,CAACC,KAAN,GAAc2B,OAAO,CAACC,QAAR,CAAiBC,MAA/B,EACA9B,KAAK,CAACK,YAAN,GAAqBuB,OAAO,CAACC,QAAR,CAAiBE,OADtC,CAD0B,CAI1B;MACA;MACA;;MACA/B,KAAK,CAACW,QAAN,GAAiB,IAAjB;IACD,CAnBQ;;IAqBT4B,mBAAmB,CAACvC,KAAD,EAAO;MACxBA,KAAK,CAACU,wBAAN,GAAiC,IAAjC;IACD,CAvBQ;;IAyBT8B,oBAAoB,CAACxC,KAAD,EAAQ4B,OAAR,EAAgB;MAClC5B,KAAK,CAACS,UAAN,GAAmBmB,OAAnB;IACD,CA3BQ;;IA6BTa,qBAAqB,CAACzC,KAAD,EAAO;MAC1BA,KAAK,CAACY,eAAN,GAAwB,IAAxB;IACD,CA/BQ;;IAiCT8B,aAAa,CAAC1C,KAAD,EAAQ2C,IAAR,EAAa;MACxB3C,KAAK,CAACS,UAAN,CAAiBmC,MAAjB,CAAwBpB,GAAG,IAAI;QAC7B,OAAOA,GAAG,CAACF,EAAJ,KAAWqB,IAAlB;MACD,CAFD;IAGD,CArCQ;;IAuCT9B,UAAU,CAACb,KAAD,EAAQ4B,OAAR,EAAgB;MACxB5B,KAAK,CAACa,UAAN,CAAiBC,OAAjB,GAA2Bc,OAAO,CAACC,QAAR,CAAiBI,IAAjB,CAAsBY,MAAjD,EACA7C,KAAK,CAACa,UAAN,CAAiBE,MAAjB,GAA0Ba,OAAO,CAACC,QAAR,CAAiBd,MAD3C;IAED,CA1CQ;;IA4CT+B,cAAc,CAAC9C,KAAD,EAAO;MACnBA,KAAK,CAACW,QAAN,GAAiB,KAAjB;MACAX,KAAK,CAACO,IAAN,GAAa,EAAb;MACAP,KAAK,CAACC,KAAN,GAAc,EAAd;MACAD,KAAK,CAACG,WAAN,GAAoB,EAApB;MACAH,KAAK,CAACK,YAAN,GAAqB,EAArB;IACD;;EAlDQ,CAnDiB;EAwG5B0C,OAAO,EAAE;IAEL,MAAMC,SAAN,CAAgB;MAACC;IAAD,CAAhB,EAA0B1C,IAA1B,EAAgC;MAC9B,IAAI;QAEF,MAAMsB,QAAQ,GAAG,MAAMnC,WAAW,CAACwD,KAAZ,CAAkB3C,IAAlB,CAAvB;;QAEA,IAAGsB,QAAQ,YAAYhC,UAAvB,EAAkC;UAChCoD,MAAM,CAAC,YAAD,EAAepB,QAAf,CAAN;UACA,OAAO,KAAP;QACD;;QAED,IAAG,EAAEA,QAAQ,CAAC5B,KAAT,KAAmB,EAArB,CAAH,EAA4B;UAC1BgD,MAAM,CAAC,cAAD,EAAiB;YAAEpB,QAAF;YAAYtB;UAAZ,CAAjB,CAAN,CAD0B,CAE1B;;UACAhB,MAAM,CAAC4D,IAAP,CAAY,OAAZ;QACD;MAEF,CAfD,CAeE,OAAOC,CAAP,EAAU;QACV,OAAOA,CAAP;MACD;IACF,CArBI;;IAuBL,MAAMC,YAAN,CAAmB;MAAEJ;IAAF,CAAnB,EAA+B1C,IAA/B,EAAqC;MAEnC,IAAI;QAEF,MAAMsB,QAAQ,GAAG,MAAMnC,WAAW,CAAC4D,QAAZ,CAAqB/C,IAArB,CAAvB;;QAEA,IAAG,EAAEsB,QAAQ,CAACd,MAAT,KAAoB,GAAtB,KAA8B,EAAEc,QAAQ,CAACI,IAAT,CAAchC,KAAd,KAAwB,EAA1B,CAAjC,EAA+D;UAC7DgD,MAAM,CAAC,qBAAD,EAAwBpB,QAAxB,CAAN;UACAtC,MAAM,CAAC4D,IAAP,CAAY,QAAZ;UACA;QACD;;QAED,IAAGtB,QAAQ,YAAYhC,UAAvB,EAAkC;UAChCoD,MAAM,CAAC,mBAAD,EAAsBpB,QAAtB,CAAN;UACA,OAAO,KAAP;QACD;MAEF,CAfD,CAeE,OAAOuB,CAAP,EAAU;QACV,OAAO,KAAP;MACD;IACF,CA3CI;;IA6CL,MAAMG,UAAN,CAAiB;MAACN;IAAD,CAAjB,EAA2B;MACzB;MACA,IAAI;QAEF,IAAG,EAAErD,YAAY,CAACU,eAAb,KAAiC,EAAnC,CAAH,EAA0C;UACxC,MAAMuB,QAAQ,GAAG,MAAMnC,WAAW,CAAC8D,MAAZ,EAAvB;;UACA,IAAG3B,QAAQ,CAACd,MAAT,KAAoB,GAAvB,EAA2B;YACzBkC,MAAM,CAAC,gBAAD,CAAN;YACArD,YAAY,CAAC6D,WAAb;YACA7D,YAAY,CAAC8D,iBAAb;YACA9D,YAAY,CAAC+D,kBAAb;YACApE,MAAM,CAAC4D,IAAP,CAAY,QAAZ;UACD;QACF;;QAEDF,MAAM,CAAC,gBAAD,CAAN;QACA1D,MAAM,CAAC4D,IAAP,CAAY,QAAZ,EAdE,CAeF;MACD,CAhBD,CAgBE,OAAOC,CAAP,EAAU;QACV,OAAO,KAAP;MACD;IACF,CAlEI;;IAoEL;IAEA,MAAMQ,MAAN,CAAa;MAAEX;IAAF,CAAb,EAAyBrB,OAAzB,EAAkC;MAEhC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMlC,WAAW,CAACiE,MAAZ,CAAmBhC,OAAnB,CAAvB;;QACA,IAAIC,QAAQ,CAACd,MAAT,KAAoB,GAAxB,EAA6B;UAC3BkC,MAAM,CAAC,uBAAD,CAAN;UACA,OAAO,IAAP;QACD;MAEF,CAPD,CAOE,OAAOG,CAAP,EAAU;QACV,OAAO,KAAP;MACD;IACF,CAlFI;;IAoFL,MAAMS,IAAN,CAAW;MAAEZ;IAAF,CAAX,EAAuB;MAErB,IAAI;QACF,MAAMpB,QAAQ,GAAG,MAAMlC,WAAW,CAACkE,IAAZ,EAAvB;;QACA,IAAGhC,QAAQ,CAACd,MAAT,KAAoB,GAAvB,EAA2B;UACzBkC,MAAM,CAAC,sBAAD,EAAyBpB,QAAzB,CAAN;UACA,OAAO,IAAP;QACD;MAEF,CAPD,CAOE,OAAOuB,CAAP,EAAU;QACV,OAAO,KAAP;MACD;IACF,CAhGI;;IAkGL,MAAMU,MAAN,CAAa;MAAEb;IAAF,CAAb,EAAyBN,IAAzB,EAA+B;MAE7B,IAAI;QACF,MAAMd,QAAQ,GAAG,MAAMlC,WAAW,CAACmE,MAAZ,CAAmBnB,IAAnB,CAAvB;QAEAM,MAAM,CAAC,eAAD,EAAkBpB,QAAlB,CAAN;QACA,OAAO,IAAP;MAED,CAND,CAME,OAAOuB,CAAP,EAAU;QACV,OAAO,KAAP;MACD;IACF,CA7GI;;IA+GL,MAAMW,MAAN,CAAa;MAAEd;IAAF,CAAb,EAAyBN,IAAzB,EAA+B;MAC7B,IAAI;QACF,MAAMd,QAAQ,GAAG,MAAMlC,WAAW,CAACoE,MAAZ,CAAmBpB,IAAnB,CAAvB;QACAM,MAAM,CAAC,eAAD,EAAkBpB,QAAlB,CAAN;QACA,OAAOA,QAAP;MACD,CAJD,CAIE,OAAOuB,CAAP,EAAU;QACV,OAAOA,CAAP;MACD;IACF;;EAvHI;AAxGmB,CAAf,CAAf"},"metadata":{},"sourceType":"module"}